{"version":3,"file":"static/js/129.47aa7a6f.chunk.js","mappings":"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","sources":["pages/Accounts.jsx","redux/accounts/accountsSelector.js"],"sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAllAccounts, selectAccountsByPage } from '../redux/accounts/accountsSelector';\nimport { useEffect, useState } from 'react';\nimport { getAllAccountsThunk, getAccountsThunk, getProfilesByAccountIdThank, LIMIT } from '../redux/accounts/operationAccounts';\nimport { NavLink } from 'react-router-dom';\nimport { filterByEmailSet, filterByDateSet, selectFilterByEmail, selectFilterByDate } from '../redux/filter/filterSlice';\n\nconst Accounts = () => {\n    const allAccounts = useSelector(selectAllAccounts);\n    const accountsByPage = useSelector(selectAccountsByPage);\n    const dispatch = useDispatch();\n\n    const [page, setPage] = useState(0)\n    const [isLoadMore, setIsLoadMore] = useState(false);\n    const [isLoadLess, setIsLoadLess] = useState(true);\n    const [isChecked, setIsChecked] = useState(false)\n\n    console.log('page =>', page);\n    console.log('isLoadMore =>', isLoadMore);\n    console.log('isLoadLess =>', isLoadLess);\n\n    const filterEmail = useSelector(selectFilterByEmail);\n    const filterDate = useSelector(selectFilterByDate);\nconsole.log('filterDate', filterDate);\n\n    const onChangeFilter = (event) => {\n        console.log(event.currentTarget);\n        const { type, value } = event.currentTarget;\n        switch (type) {\n            case 'email':\n                        dispatch(filterByEmailSet(value))\n\n                break;\n        case 'date':\n                        dispatch(filterByDateSet(value))\n\n                break;\n            default:\n                break;\n        }\n    };\n\n    const checkHandler = () => {\n        setIsChecked(!isChecked)\n        isChecked ? setIsLoadMore(false) : setIsLoadMore(true);\n    };\n\n    useEffect(() => {\n        dispatch(getAllAccountsThunk())\n    }, [dispatch]);\n    const totalPage = allAccounts.length / LIMIT;\n\n    useEffect(() => {\n        if (page === 0) {\n            setPage(page + 1)\n            return;\n        };\n        if (page > 1) {\n            setIsLoadLess(false);\n        };\n        if (page === totalPage) {\n            setIsLoadMore(true);\n        };\n        dispatch(getAccountsThunk(page))\n    }, [dispatch, page, totalPage]);\n\n    const onClickAccountId = (accountId) => {\n        console.log('click onClickAccountId', accountId);\n        dispatch(getProfilesByAccountIdThank(accountId))\n    };\n\n    \n    const onClickLoadMore = () => {\n        if (page === totalPage - 1) {\n            setIsLoadMore(true);\n        };\n        if (page > 1) {\n            setIsLoadLess(false);\n        };\n        setPage(page + 1)\n    };\n\n    const onClickLoadLess = () => {\n        if (page < totalPage + 1) {\n            setIsLoadMore(false);\n        };\n\n        if (page > 2) {\n            setIsLoadLess(false);\n        };\n        if (page === 2) {\n            setIsLoadLess(true);\n        };\n        setPage(page - 1)\n    };\n\n    const lowerFilter = filterEmail.toLowerCase();\n    const visibleAccounts = allAccounts.filter(({ email }) =>\n        (email.toLowerCase().includes(lowerFilter)));\n        const visibleAccountsByDate = visibleAccounts.filter(({ creationDate }) =>\n        (creationDate.includes(filterDate)));\n        console.log('visibleAccountsByDate', visibleAccountsByDate);\n    \n    return (\n        <div className='container'>\n            <h2>Accounts</h2>\n            <div className=\"form-check\">\n                <input className=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\"\n                    checked={isChecked}\n                    onChange={checkHandler}\n                />\n                <label className=\"form-check-label\" for=\"flexCheckDefault\">\n                    All accounts  </label>\n            </div>\n            <div className=\"mb-3\">\n                <label for=\"exampleFormControlInput1\" className=\"form-label\"\n                                \n\n                >Filter by Email</label>\n                <input type=\"email\" className=\"form-control\" id=\"exampleFormControlInput\"\n                    value={filterEmail}\n                    onChange={onChangeFilter}\n                    placeholder=\"Write Email\" />\n            </div>\n            <div className=\"mb-3\">\n                <label for=\"exampleFormControlInput2\" className=\"form-label\"\n                >Sort by Data</label>\n                <input type=\"date\" className=\"form-control\" id=\"exampleFormControlInput2\"\n                    value={filterDate}\n                    onChange={onChangeFilter}\n                    placeholder=\"Write Date: year-mm-dd\" />\n            </div>\n            \n            <table className=\"table table-striped table-bordered\">\n                <thead className='table-dark'>\n                    <tr>\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">AccountId</th>\n                        <th scope=\"col\">Email</th>\n                        <th scope=\"col\">AuthToken</th>\n                        <th scope=\"col\">CreationDate</th>\n\n                    </tr>\n                </thead>\n                <tbody className=\"table-group-divider\">\n                    {(filterEmail.length > 0 && filterEmail.length > 0) ? visibleAccountsByDate?.map((acc, index) =>\n                            <tr key={acc.accountId}>\n                                <th scope=\"row\">{index + 1 + (page * 10 - 10)}</th>\n                                <td onClick={() => onClickAccountId(acc.accountId)}><NavLink className=\"btn btn-secondary\" role=\"button\" to=\"/profiles\">{acc.accountId}</NavLink></td>\n                                <td>{acc.email}</td>\n                                <td>{acc.authToken}</td>\n                                <td>{acc.creationDate}</td>\n                            </tr>) :\n                    filterEmail.length > 0 ?\n                        visibleAccounts?.map((acc, index) =>\n                            <tr key={acc.accountId}>\n                                <th scope=\"row\">{index + 1 + (page * 10 - 10)}</th>\n                                <td onClick={() => onClickAccountId(acc.accountId)}><NavLink className=\"btn btn-secondary\" role=\"button\" to=\"/profiles\">{acc.accountId}</NavLink></td>\n                                <td>{acc.email}</td>\n                                <td>{acc.authToken}</td>\n                                <td>{acc.creationDate}</td>\n                            </tr>) :\n                        isChecked ?\n                            allAccounts?.map((acc, index) =>\n                                <tr key={acc.accountId}>\n                                    <th scope=\"row\">{index + 1 + (page * 10 - 10)}</th>\n                                    <td onClick={() => onClickAccountId(acc.accountId)}><NavLink className=\"btn btn-secondary\" role=\"button\" to=\"/profiles\">{acc.accountId}</NavLink></td>\n                                    <td>{acc.email}</td>\n                                    <td>{acc.authToken}</td>\n                                    <td>{acc.creationDate}</td>\n                                </tr>) :\n                            accountsByPage?.map((acc, index) =>\n                                <tr key={acc.accountId}>\n                                    <th scope=\"row\">{index + 1 + (page * 10 - 10)}</th>\n                                    <td onClick={() => onClickAccountId(acc.accountId)}><NavLink className=\"btn btn-secondary\" role=\"button\" to=\"/profiles\">{acc.accountId}</NavLink></td>\n                                    <td>{acc.email}</td>\n                                    <td>{acc.authToken}</td>\n                                    <td>{acc.creationDate}</td>\n                                </tr>)}\n\n                </tbody>\n            </table>\n            {!isLoadMore && <button type=\"button\" className=\"btn btn-primary btn-lg\" onClick={onClickLoadMore}>Load more</button>}\n            {!isLoadLess && <button type=\"button\" className=\"btn btn-warning btn-lg\" onClick={onClickLoadLess}>Load less</button>}\n        </div>\n    )\n};\n\nexport default Accounts;","export const selectAllAccounts = state => state.accounts.allAccounts;\nexport const selectAccountsByPage = state => state.accounts.accountsByPage;\nexport const selectSelectedAccountById= state => state.accounts.selectedAccountById;\nexport const selectIsLoading = state => state.accounts.isLoading;\nexport const selectError = state => state.accounts.error;\n"],"names":["allAccounts","useSelector","selectAllAccounts","accountsByPage","selectAccountsByPage","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","page","setPage","_useState3","_useState4","isLoadMore","setIsLoadMore","_useState5","_useState6","isLoadLess","setIsLoadLess","_useState7","_useState8","isChecked","setIsChecked","console","log","filterEmail","selectFilterByEmail","filterDate","selectFilterByDate","onChangeFilter","event","currentTarget","_event$currentTarget","type","value","filterByEmailSet","filterByDateSet","useEffect","getAllAccountsThunk","totalPage","length","LIMIT","getAccountsThunk","onClickAccountId","accountId","getProfilesByAccountIdThank","lowerFilter","toLowerCase","visibleAccounts","filter","_ref","email","includes","visibleAccountsByDate","_ref2","creationDate","_jsxs","className","children","_jsx","id","checked","onChange","for","placeholder","scope","map","acc","index","onClick","NavLink","role","to","authToken","state","accounts","selectSelectedAccountById","selectedAccountById"],"sourceRoot":""}