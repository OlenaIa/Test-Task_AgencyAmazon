{"version":3,"file":"static/js/741.f05283cd.chunk.js","mappings":"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","sources":["redux/filter/filterSelector.js","webpack://react-homework-template/./src/components/Filters/Filter.module.css?559f","components/Filters/Filter.jsx","pages/Accounts.jsx","redux/accounts/accountsSelector.js"],"sourcesContent":["export const selectFilterByEmail = state => state.filter.filterByEmail;\nexport const selectFilterByDate = state => state.filter.filterByDate;\nexport const selectIsCheckedAllAccounts = state => state.filter.isCheckedAllAccounts;","// extracted by mini-css-extract-plugin\nexport default {\"wrapFilters\":\"Filter_wrapFilters__GvMFl\"};","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterByEmailSet, filterByDateSet, isCheckedAllAccountsSet } from '../../redux/filter/filterSlice';\nimport css from './Filter.module.css';\nimport { selectIsCheckedAllAccounts, selectFilterByEmail, selectFilterByDate } from '../../redux/filter/filterSelector';\n\nexport const Filters = () => {\n    const dispatch = useDispatch();\n    const filterEmail = useSelector(selectFilterByEmail);\n    const filterDate = useSelector(selectFilterByDate);\n    const IsCheckedAllAccounts = useSelector(selectIsCheckedAllAccounts);\n\n    const onChangeFilter = (event) => {\n        const { type, value } = event.currentTarget;\n        switch (type) {\n            case 'email':\n                const lowerEmail = value.toLowerCase();\n                dispatch(filterByEmailSet(lowerEmail))\n                break;\n            case 'date':\n                dispatch(filterByDateSet(value))\n                break;\n            default:\n                break;\n        }\n    };\n\n    const checkHandler = () => {\n        dispatch(isCheckedAllAccountsSet(!IsCheckedAllAccounts));\n    };\n\n    return (\n        <div className={css.wrapFilters}>\n            <div className=\"form-check\">\n                <input\n                    className=\"form-check-input\"\n                    type=\"checkbox\"\n                    value=\"\"\n                    id=\"flexCheckDefault\"\n                    checked={IsCheckedAllAccounts}\n                    onChange={checkHandler}\n                />\n                <label\n                    className=\"form-check-label\"\n                    htmlFor=\"flexCheckDefault\">\n                    Choose all accounts\n                </label>\n            </div>\n\n            <div className=\"mb-3\">\n                <label\n                    htmlFor=\"emailInput\"\n                    className=\"form-label\">\n                    Filter by Email\n                </label>\n                <input\n                    type=\"email\"\n                    className=\"form-control\"\n                    id=\"emailInput\"\n                    value={filterEmail}\n                    onChange={onChangeFilter}\n                    placeholder=\"Write Email\"\n                />\n            </div>\n\n            <div className=\"mb-3\">\n                <label\n                    htmlFor=\"dataInput\"\n                    className=\"form-label\">\n                    Sort by Data\n                </label>\n                <input\n                    type=\"date\"\n                    className=\"form-control\"\n                    id=\"dataInput\"\n                    value={filterDate}\n                    onChange={onChangeFilter}\n                    placeholder=\"Write Date: year-mm-dd\" />\n            </div>\n        </div>\n    )\n};\n\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAllAccounts, selectAccountsByPage } from '../redux/accounts/accountsSelector';\nimport { useEffect, useState } from 'react';\nimport { getAllAccountsThunk, getAccountsThunk, getProfilesByAccountIdThank, LIMIT } from '../redux/accounts/operationAccounts';\nimport { NavLink } from 'react-router-dom';\nimport {selectFilterByEmail, selectFilterByDate, selectIsCheckedAllAccounts} from '../redux/filter/filterSelector'\nimport { Filters } from 'components/Filters/Filter';\n\nconst Accounts = () => {\n    const dispatch = useDispatch();\n    const allAccounts = useSelector(selectAllAccounts);\n    const accountsByPage = useSelector(selectAccountsByPage);\n    const filterEmail = useSelector(selectFilterByEmail);\n    const filterDate = useSelector(selectFilterByDate);\n    const isCheckedAllAccounts = useSelector(selectIsCheckedAllAccounts);\n\n    const [page, setPage] = useState(0)\n    const [isLoadMore, setIsLoadMore] = useState(false);\n    const [isLoadLess, setIsLoadLess] = useState(true);\n    console.log('page =>', page);\n    console.log('isLoadMore =>', isLoadMore);\n    console.log('isLoadLess =>', isLoadLess);\n\n    useEffect(() => {\n        console.log('isCheckedAllAccounts in use Effect', isCheckedAllAccounts);\n        isCheckedAllAccounts ? setIsLoadMore(true) : setIsLoadMore(false);\n    }, [isCheckedAllAccounts]);\n\n    useEffect(() => {\n        dispatch(getAllAccountsThunk())\n    }, [dispatch]);\n\n    const totalPage = allAccounts.length / LIMIT;\n\n    useEffect(() => {\n        if (page === 0) {\n            setPage(page + 1)\n            return;\n        };\n        if (page > 1) {\n            setIsLoadLess(false);\n        };\n        if (page === totalPage ) {\n            setIsLoadMore(true);\n        };\n\n\n        dispatch(getAccountsThunk(page))\n    }, [dispatch, page, totalPage]);\n\n    const onClickAccountId = (accountId) => {\n        console.log('click onClickAccountId', accountId);\n        dispatch(getProfilesByAccountIdThank(accountId))\n    };\n\n    \n    const onClickLoadMore = () => {\n        if (page === totalPage - 1) {\n            setIsLoadMore(true);\n        };\n        if (page > 1) {\n            setIsLoadLess(false);\n        };\n        setPage(page + 1)\n    };\n\n    const onClickLoadLess = () => {\n        if (page < totalPage + 1) {\n            setIsLoadMore(false);\n        };\n\n        if (page > 2) {\n            setIsLoadLess(false);\n        };\n        if (page === 2) {\n            setIsLoadLess(true);\n        };\n        setPage(page - 1)\n    };\n\n    const lowerFilter = filterEmail.toLowerCase();\n\n    const visibleAccounts = allAccounts.filter(({ email }) =>\n        (email.toLowerCase().includes(lowerFilter)));\n    \n    const visibleAccountsByDate = visibleAccounts.filter(({ creationDate }) =>\n        (creationDate.includes(filterDate)));\n    \n    return (\n        <div className='container'>\n            <h2>Accounts</h2>\n            <Filters/>\n            \n            \n            <table className=\"table table-striped table-bordered\">\n                <thead className='table-dark'>\n                    <tr>\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">AccountId</th>\n                        <th scope=\"col\">Email</th>\n                        <th scope=\"col\">AuthToken</th>\n                        <th scope=\"col\">CreationDate</th>\n\n                    </tr>\n                </thead>\n                <tbody className=\"table-group-divider\">\n                    {(filterEmail.length > 0 && filterEmail.length > 0) ? visibleAccountsByDate?.map((acc, index) =>\n                        <tr key={acc.accountId}>\n                            <th scope=\"row\">{index + 1 + (page * 10 - 10)}</th>\n                            <td onClick={() => onClickAccountId(acc.accountId)}><NavLink className=\"btn btn-secondary\" role=\"button\" to=\"/profiles\">{acc.accountId}</NavLink></td>\n                            <td>{acc.email}</td>\n                            <td>{acc.authToken}</td>\n                            <td>{acc.creationDate}</td>\n                        </tr>) :\n                        filterEmail.length > 0 ?\n                            visibleAccounts?.map((acc, index) =>\n                                <tr key={acc.accountId}>\n                                    <th scope=\"row\">{index + 1 + (page * 10 - 10)}</th>\n                                    <td onClick={() => onClickAccountId(acc.accountId)}><NavLink className=\"btn btn-secondary\" role=\"button\" to=\"/profiles\">{acc.accountId}</NavLink></td>\n                                    <td>{acc.email}</td>\n                                    <td>{acc.authToken}</td>\n                                    <td>{acc.creationDate}</td>\n                                </tr>) :\n                            isCheckedAllAccounts ?\n                                allAccounts?.map((acc, index) =>\n                                    <tr key={acc.accountId}>\n                                        <th scope=\"row\">{index + 1 + (page * 10 - 10)}</th>\n                                        <td onClick={() => onClickAccountId(acc.accountId)}><NavLink className=\"btn btn-secondary\" role=\"button\" to=\"/profiles\">{acc.accountId}</NavLink></td>\n                                        <td>{acc.email}</td>\n                                        <td>{acc.authToken}</td>\n                                        <td>{acc.creationDate}</td>\n                                    </tr>) :\n                                accountsByPage?.map((acc, index) =>\n                                    <tr key={acc.accountId}>\n                                        <th scope=\"row\">{index + 1 + (page * 10 - 10)}</th>\n                                        <td onClick={() => onClickAccountId(acc.accountId)}><NavLink className=\"btn btn-secondary\" role=\"button\" to=\"/profiles\">{acc.accountId}</NavLink></td>\n                                        <td>{acc.email}</td>\n                                        <td>{acc.authToken}</td>\n                                        <td>{acc.creationDate}</td>\n                                    </tr>)}\n\n                </tbody>\n            </table>\n            {!isLoadMore && <button type=\"button\" className=\"btn btn-primary btn-lg\" onClick={onClickLoadMore}>Load more</button>}\n            {!isLoadLess && <button type=\"button\" className=\"btn btn-warning btn-lg\" onClick={onClickLoadLess}>Load less</button>}\n        </div>\n    )\n};\n\nexport default Accounts;","export const selectAllAccounts = state => state.accounts.allAccounts;\nexport const selectAccountsByPage = state => state.accounts.accountsByPage;\nexport const selectSelectedAccountById= state => state.accounts.selectedAccountById;\nexport const selectIsLoading = state => state.accounts.isLoading;\nexport const selectError = state => state.accounts.error;\n"],"names":["selectFilterByEmail","state","filter","filterByEmail","selectFilterByDate","filterByDate","selectIsCheckedAllAccounts","isCheckedAllAccounts","Filters","dispatch","useDispatch","filterEmail","useSelector","filterDate","IsCheckedAllAccounts","onChangeFilter","event","_event$currentTarget","currentTarget","type","value","lowerEmail","toLowerCase","filterByEmailSet","filterByDateSet","_jsxs","className","css","children","_jsx","id","checked","onChange","isCheckedAllAccountsSet","htmlFor","placeholder","allAccounts","selectAllAccounts","accountsByPage","selectAccountsByPage","_useState","useState","_useState2","_slicedToArray","page","setPage","_useState3","_useState4","isLoadMore","setIsLoadMore","_useState5","_useState6","isLoadLess","setIsLoadLess","console","log","useEffect","getAllAccountsThunk","totalPage","length","LIMIT","getAccountsThunk","onClickAccountId","accountId","getProfilesByAccountIdThank","lowerFilter","visibleAccounts","_ref","email","includes","visibleAccountsByDate","_ref2","creationDate","scope","map","acc","index","onClick","NavLink","role","to","authToken","accounts","selectSelectedAccountById","selectedAccountById"],"sourceRoot":""}