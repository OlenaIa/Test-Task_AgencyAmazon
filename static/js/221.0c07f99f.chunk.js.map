{"version":3,"file":"static/js/221.0c07f99f.chunk.js","mappings":"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","sources":["redux/filter/filterSelector.js","components/Filters/Filter.jsx","components/AccountItem/AccountItem.jsx","webpack://react-homework-template/./src/components/AccountsList/AccountList.module.css?9589","components/AccountsList/AccountsList.jsx","pages/Accounts.jsx","redux/accounts/accountsSelector.js","webpack://react-homework-template/./src/components/Filters/Filter.module.css?559f"],"sourcesContent":["export const selectFilterByEmail = state => state.filter.filterByEmail;\nexport const selectFilterByDate = state => state.filter.filterByDate;\nexport const selectIsCheckedAllAccounts = state => state.filter.isCheckedAllAccounts;\nexport const selectFilteredAccounts = state => state.filter.filteredAccounts;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterByEmailSet, filterByDateSet, isCheckedAllAccountsSet } from '../../redux/filter/filterSlice';\nimport css from './Filter.module.css';\nimport { selectIsCheckedAllAccounts, selectFilterByEmail, selectFilterByDate } from '../../redux/filter/filterSelector';\n\nexport const Filters = () => {\n    const dispatch = useDispatch();\n    const filterEmail = useSelector(selectFilterByEmail);\n    const filterDate = useSelector(selectFilterByDate);\n    const IsCheckedAllAccounts = useSelector(selectIsCheckedAllAccounts);\n\n    const onChangeFilter = (event) => {\n        const { type, value } = event.currentTarget;\n        switch (type) {\n            case 'email':\n                const lowerEmail = value.toLowerCase();\n                dispatch(filterByEmailSet(lowerEmail))\n                break;\n            case 'date':\n                dispatch(filterByDateSet(value))\n                break;\n            default:\n                break;\n        }\n    };\n\n    const checkHandler = () => {\n        dispatch(isCheckedAllAccountsSet(!IsCheckedAllAccounts));\n    };\n\n    return (\n        <div className={css.wrapFilters}>\n            <div className=\"form-check\">\n                <input\n                    className=\"form-check-input\"\n                    type=\"checkbox\"\n                    value=\"\"\n                    id=\"flexCheckDefault\"\n                    checked={IsCheckedAllAccounts}\n                    onChange={checkHandler}\n                />\n                <label\n                    className=\"form-check-label\"\n                    htmlFor=\"flexCheckDefault\">\n                    Choose all accounts\n                </label>\n            </div>\n\n            <div className=\"mb-3\">\n                <label\n                    htmlFor=\"emailInput\"\n                    className=\"form-label\">\n                    Filter by Email\n                </label>\n                <input\n                    type=\"email\"\n                    className=\"form-control\"\n                    id=\"emailInput\"\n                    value={filterEmail}\n                    onChange={onChangeFilter}\n                    placeholder=\"Write Email\"\n                />\n            </div>\n\n            <div className=\"mb-3\">\n                <label\n                    htmlFor=\"dataInput\"\n                    className=\"form-label\">\n                    Sort by Data\n                </label>\n                <input\n                    type=\"date\"\n                    className=\"form-control\"\n                    id=\"dataInput\"\n                    value={filterDate}\n                    onChange={onChangeFilter}\n                    placeholder=\"Write Date: year-mm-dd\" />\n            </div>\n        </div>\n    )\n};\n\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { useDispatch } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { getProfilesByAccountIdThank } from '../../redux/accounts/operationAccounts';\nimport { accountIdSet } from '../../redux/chosenIdSlice';\n\nexport const AccountItem = ({ item, index, page }) => {\n    const dispatch = useDispatch();\n\n    const onClickAccountId = (accountId) => {\n        dispatch(accountIdSet(accountId))\n        dispatch(getProfilesByAccountIdThank(accountId))\n    };\n\n    return (\n        <tr key={item.accountId}>\n            <th scope=\"row\">{index + 1 + (page * 10 - 10)}</th>\n            <td onClick={() => onClickAccountId(item.accountId)}>\n                <NavLink className=\"btn btn-secondary\" role=\"button\" to=\"/profiles\">\n                    Click id {item.accountId} \n                </NavLink>\n            </td>\n            <td>{item.email}</td>\n            <td>{item.authToken}</td>\n            <td>{item.creationDate}</td>\n        </tr>\n    )\n};","// extracted by mini-css-extract-plugin\nexport default {\"wrapButton\":\"AccountList_wrapButton__ruoKd\"};","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAllAccounts, selectAccountsByPage } from '../../redux/accounts/accountsSelector';\nimport { useEffect, useState } from 'react';\nimport { getAccountsThunk, LIMIT } from '../../redux/accounts/operationAccounts';\nimport {selectFilterByEmail, selectFilterByDate, selectIsCheckedAllAccounts, selectFilteredAccounts} from '../../redux/filter/filterSelector'\nimport { filteredAccountsSet } from '../../redux/filter/filterSlice';\nimport { AccountItem } from 'components/AccountItem/AccountItem';\nimport css from './AccountList.module.css'\n\nexport const AccountsList = () => {\n    const dispatch = useDispatch();\n    const allAccounts = useSelector(selectAllAccounts);\n    const accountsByPage = useSelector(selectAccountsByPage);\n    const filterEmail = useSelector(selectFilterByEmail);\n    const filterDate = useSelector(selectFilterByDate);\n    const isCheckedAllAccounts = useSelector(selectIsCheckedAllAccounts);\n    const filteredAccounts = useSelector(selectFilteredAccounts);\n\n    const [page, setPage] = useState(0);\n    const [totalPage, setTotalPage] = useState(1);\n    const [isLoadMore, setIsLoadMore] = useState(false);\n    const [isLoadLess, setIsLoadLess] = useState(false);\n\n    useEffect(() => {\n        if (page === 0) {\n            setPage(page + 1)\n            return;\n        };\n        dispatch(getAccountsThunk(page))\n    }, [dispatch, page, totalPage]);\n\n    useEffect(() => {\n        if (filteredAccounts.length === 0) {\n            setTotalPage(allAccounts.length / LIMIT);\n            return;\n        }\n        setTotalPage(1);\n    }, [filteredAccounts, allAccounts]);\n\n    useEffect(() => {\n        if (page >= 1 && page < totalPage) {\n            setIsLoadMore(true)\n        } else {\n            setIsLoadMore(false)\n        };\n        if (page > 1 && page <= totalPage) {\n            setIsLoadLess(true)\n        } else {\n            setIsLoadLess(false)\n        }\n    }, [page, totalPage]);\n\n    const onClickLoadMore = () => {\n        setPage(page + 1);\n    };\n\n    const onClickLoadLess = () => {\n        setPage(page - 1);\n    };\n\n    const doFilterAccount = (array, key, filterEmail) => {\n        return array.filter((item) =>\n            (item[key].toLowerCase().includes(filterEmail)));\n    };\n\n    useEffect(() => {\n        if (filterEmail === '' && filterDate === '' && isCheckedAllAccounts === false) {\n            dispatch(filteredAccountsSet([]));\n            return;\n        };\n        setPage(1);\n\n        let visibleAccounts = [];\n        if (isCheckedAllAccounts) {\n            visibleAccounts = allAccounts;\n        };\n        if (filterEmail !== '' && filterDate !== '') {\n            const visibleAccountsByEmail = doFilterAccount(allAccounts, \"email\", filterEmail);\n            visibleAccounts = doFilterAccount(visibleAccountsByEmail, \"creationDate\", filterDate);\n        };\n        if (filterEmail !== '' && filterDate === '') {\n            visibleAccounts = doFilterAccount(allAccounts, \"email\", filterEmail);\n        };\n        if (filterEmail === '' && filterDate !== '') {\n            visibleAccounts = doFilterAccount(allAccounts, \"creationDate\", filterDate);\n        };\n        dispatch(filteredAccountsSet(visibleAccounts));\n\n    }, [dispatch, allAccounts, filterEmail, filterDate, isCheckedAllAccounts]);\n\n    return (\n        <div className='container'>\n            <table className=\"table table-striped table-bordered\">\n                <thead className='table-dark'>\n                    <tr>\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">AccountId</th>\n                        <th scope=\"col\">Email</th>\n                        <th scope=\"col\">AuthToken</th>\n                        <th scope=\"col\">CreationDate</th>\n                    </tr>\n                </thead>\n                <tbody className=\"table-group-divider\">\n                    {(filterEmail.length > 0 || filterDate.length > 0 || isCheckedAllAccounts) ? filteredAccounts?.map((item, index) =>\n                        <AccountItem item={item} key={item.accountId} index={index} page={page} />\n                    ) :\n                        accountsByPage?.map((item, index) =>\n                            <AccountItem item={item} key={item.accountId} index={index} page={page} />\n                        )}\n                </tbody>\n            </table>\n            <div className={css.wrapButton}>\n                <button disabled={!isLoadMore} type=\"button\" className=\"btn btn-primary btn-lg\" onClick={onClickLoadMore}>Load more</button>\n                <button disabled={!isLoadLess} type=\"button\" className=\"btn btn-warning btn-lg\" onClick={onClickLoadLess}>Load less</button>\n            </div>\n        </div>\n    )\n};","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getAllAccountsThunk } from '../redux/accounts/operationAccounts';\nimport { Filters } from 'components/Filters/Filter';\nimport { AccountsList } from 'components/AccountsList/AccountsList';\n\nconst Accounts = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getAllAccountsThunk())\n    }, [dispatch]);\n\n    return (\n        <div className='container'>\n            <h2>Accounts</h2>\n            <Filters/>\n            <AccountsList />\n        </div>\n    )\n};\n\nexport default Accounts;","export const selectAllAccounts = state => state.accounts.allAccounts;\nexport const selectAccountsByPage = state => state.accounts.accountsByPage;\nexport const selectSelectedAccountById= state => state.accounts.selectedAccountById;\nexport const selectIsLoading = state => state.accounts.isLoading;\nexport const selectError = state => state.accounts.error;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapFilters\":\"Filter_wrapFilters__GvMFl\"};"],"names":["selectFilterByEmail","state","filter","filterByEmail","selectFilterByDate","filterByDate","selectIsCheckedAllAccounts","isCheckedAllAccounts","selectFilteredAccounts","filteredAccounts","Filters","dispatch","useDispatch","filterEmail","useSelector","filterDate","IsCheckedAllAccounts","onChangeFilter","event","_event$currentTarget","currentTarget","type","value","lowerEmail","toLowerCase","filterByEmailSet","filterByDateSet","_jsxs","className","css","children","_jsx","id","checked","onChange","isCheckedAllAccountsSet","htmlFor","placeholder","AccountItem","_ref","item","index","page","scope","onClick","accountId","accountIdSet","getProfilesByAccountIdThank","NavLink","role","to","email","authToken","creationDate","AccountsList","allAccounts","selectAllAccounts","accountsByPage","selectAccountsByPage","_useState","useState","_useState2","_slicedToArray","setPage","_useState3","_useState4","totalPage","setTotalPage","_useState5","_useState6","isLoadMore","setIsLoadMore","_useState7","_useState8","isLoadLess","setIsLoadLess","useEffect","getAccountsThunk","length","LIMIT","doFilterAccount","array","key","includes","visibleAccounts","visibleAccountsByEmail","filteredAccountsSet","map","disabled","getAllAccountsThunk","accounts","selectSelectedAccountById","selectedAccountById"],"sourceRoot":""}