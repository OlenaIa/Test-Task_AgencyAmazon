{"version":3,"file":"static/js/502.bb91f993.chunk.js","mappings":"2MA4CA,UArCiB,WACb,IAAMA,GAAsBC,EAAAA,EAAAA,IAAYC,EAAAA,IAElCC,GAAWC,EAAAA,EAAAA,MAOjB,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,8BACJF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,qCAAoCC,SAAA,EACjDC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,aAAYC,UACzBF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,MAAM,MAAKF,SAAC,OAChBC,EAAAA,EAAAA,KAAA,MAAIC,MAAM,MAAKF,SAAC,eAChBC,EAAAA,EAAAA,KAAA,MAAIC,MAAM,MAAKF,SAAC,aAChBC,EAAAA,EAAAA,KAAA,MAAIC,MAAM,MAAKF,SAAC,sBAGxBC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,sBAAqBC,SACd,OAAnBP,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBU,KAAI,SAACC,EAAMC,GAAK,OAClCP,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,MAAM,MAAKF,SAAEK,EAAQ,KACzBJ,EAAAA,EAAAA,KAAA,MAAIK,QAAS,kBArBXC,EAqBkCH,EAAKG,UApB7DC,QAAQC,IAAI,yBAA0BF,QAC9CX,GAASc,EAAAA,EAAAA,IAAaH,IAFO,IAACA,CAqBiD,EAACP,UAACC,EAAAA,EAAAA,KAACU,EAAAA,GAAO,CAACZ,UAAU,oBAAoBa,KAAK,SAASC,GAAG,aAAYb,SAAEI,EAAKG,eAChIN,EAAAA,EAAAA,KAAA,MAAAD,SAAKI,EAAKU,WACVb,EAAAA,EAAAA,KAAA,MAAAD,SAAKI,EAAKW,iBAJLC,EAAAA,EAAAA,IAAO,GAKX,WAM7B,C,+EC1CO,IAAMC,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASA,QAAS,EAClDxB,EAAwB,SAAAuB,GAAK,OAAIA,EAAMC,SAASC,eAAgB,C,uDCAtE,IAkBIJ,EAAS,WAAH,IAAIK,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAE,OAC5BG,OAAOC,gBAAgB,IAAIC,WAAWN,IAAOO,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,C","sources":["pages/Profiles.jsx","redux/accounts/accountsSelector.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectSelectedAccount } from '../redux/accounts/accountsSelector';\nimport { nanoid } from 'nanoid';\nimport { NavLink } from 'react-router-dom';\nimport { profileIdSet } from '../redux/chosenIdSlice';\n\nconst Profiles = () => {\n    const profilesByAccountId = useSelector(selectSelectedAccount);\n    // const { accountId } = profilesByAccountId[0];\n    const dispatch = useDispatch();\n\n    const onClickProfileId = (profileId) => {\n        console.log('click onClickProfileId', profileId);\ndispatch(profileIdSet(profileId))\n    };\n\n    return (\n        <div className='container'>\n            <h2>Profiles for accountId: {}</h2>\n            <table className=\"table table-striped table-bordered\">\n                <thead className='table-dark'>\n                    <tr>\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">ProfileId</th>\n                        <th scope=\"col\">Country</th>\n                        <th scope=\"col\">Marketplace</th>\n                    </tr>\n                </thead>\n                <tbody className=\"table-group-divider\">\n                    {profilesByAccountId?.map((item, index) =>\n                        <tr key={nanoid(3)}>\n                            <th scope=\"row\">{index + 1}</th>\n                            <td onClick={() => onClickProfileId(item.profileId)}><NavLink className=\"btn btn-secondary\" role=\"button\" to=\"/campaigns\">{item.profileId}</NavLink></td>\n                            <td>{item.country}</td>\n                            <td>{item.marketplace}</td>\n                        </tr>)}\n\n                </tbody>\n            </table>\n        </div>\n    )\n};\n\nexport default Profiles;","export const selectAccounts = state => state.accounts.accounts;\nexport const selectSelectedAccount = state => state.accounts.selectedAccount;\nexport const selectIsLoading = state => state.accounts.isLoading;\nexport const selectError = state => state.accounts.error;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["profilesByAccountId","useSelector","selectSelectedAccount","dispatch","useDispatch","_jsxs","className","children","_jsx","scope","map","item","index","onClick","profileId","console","log","profileIdSet","NavLink","role","to","country","marketplace","nanoid","selectAccounts","state","accounts","selectedAccount","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}