{"version":3,"file":"static/js/301.1a142a00.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Filters/Filter.module.css?559f","redux/filter/filterSelector.js","components/Filters/Filter.jsx","components/AccountItem/AccountItem.jsx","components/AccountsList/AccountsList.jsx","pages/Accounts.jsx","redux/accounts/accountsSelector.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapFilters\":\"Filter_wrapFilters__GvMFl\"};","export const selectFilterByEmail = state => state.filter.filterByEmail;\nexport const selectFilterByDate = state => state.filter.filterByDate;\nexport const selectIsCheckedAllAccounts = state => state.filter.isCheckedAllAccounts;\nexport const selectFilteredAccounts = state => state.filter.filteredAccounts;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterByEmailSet, filterByDateSet, isCheckedAllAccountsSet } from '../../redux/filter/filterSlice';\nimport css from './Filter.module.css';\nimport { selectIsCheckedAllAccounts, selectFilterByEmail, selectFilterByDate } from '../../redux/filter/filterSelector';\n\nexport const Filters = () => {\n    const dispatch = useDispatch();\n    const filterEmail = useSelector(selectFilterByEmail);\n    const filterDate = useSelector(selectFilterByDate);\n    const IsCheckedAllAccounts = useSelector(selectIsCheckedAllAccounts);\n\n    const onChangeFilter = (event) => {\n        const { type, value } = event.currentTarget;\n        switch (type) {\n            case 'email':\n                const lowerEmail = value.toLowerCase();\n                dispatch(filterByEmailSet(lowerEmail))\n                break;\n            case 'date':\n                dispatch(filterByDateSet(value))\n                break;\n            default:\n                break;\n        }\n    };\n\n    const checkHandler = () => {\n        dispatch(isCheckedAllAccountsSet(!IsCheckedAllAccounts));\n    };\n\n    return (\n        <div className={css.wrapFilters}>\n            <div className=\"form-check\">\n                <input\n                    className=\"form-check-input\"\n                    type=\"checkbox\"\n                    value=\"\"\n                    id=\"flexCheckDefault\"\n                    checked={IsCheckedAllAccounts}\n                    onChange={checkHandler}\n                />\n                <label\n                    className=\"form-check-label\"\n                    htmlFor=\"flexCheckDefault\">\n                    Choose all accounts\n                </label>\n            </div>\n\n            <div className=\"mb-3\">\n                <label\n                    htmlFor=\"emailInput\"\n                    className=\"form-label\">\n                    Filter by Email\n                </label>\n                <input\n                    type=\"email\"\n                    className=\"form-control\"\n                    id=\"emailInput\"\n                    value={filterEmail}\n                    onChange={onChangeFilter}\n                    placeholder=\"Write Email\"\n                />\n            </div>\n\n            <div className=\"mb-3\">\n                <label\n                    htmlFor=\"dataInput\"\n                    className=\"form-label\">\n                    Sort by Data\n                </label>\n                <input\n                    type=\"date\"\n                    className=\"form-control\"\n                    id=\"dataInput\"\n                    value={filterDate}\n                    onChange={onChangeFilter}\n                    placeholder=\"Write Date: year-mm-dd\" />\n            </div>\n        </div>\n    )\n};\n\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { useDispatch } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { getProfilesByAccountIdThank } from '../../redux/accounts/operationAccounts';\nimport { accountIdSet } from '../../redux/chosenIdSlice';\n\nexport const AccountItem = ({ item, index, page, id }) => {\n    const dispatch = useDispatch();\n\n    const onClickAccountId = (accountId) => {\n        dispatch(accountIdSet(accountId))\n        dispatch(getProfilesByAccountIdThank(accountId))\n    };\n\n    return (\n        <tr key={id}>\n            <th scope=\"row\">{index + 1 + (page * 10 - 10)}</th>\n            <td onClick={() => onClickAccountId(item.accountId)}>\n                <NavLink className=\"btn btn-secondary\" role=\"button\" to=\"/profiles\">\n                    {item.accountId}\n                </NavLink>\n            </td>\n            <td>{item.email}</td>\n            <td>{item.authToken}</td>\n            <td>{item.creationDate}</td>\n        </tr>\n    )\n};","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAllAccounts, selectAccountsByPage } from '../../redux/accounts/accountsSelector';\nimport { useEffect, useState } from 'react';\nimport { getAccountsThunk, LIMIT } from '../../redux/accounts/operationAccounts';\nimport {selectFilterByEmail, selectFilterByDate, selectIsCheckedAllAccounts, selectFilteredAccounts} from '../../redux/filter/filterSelector'\nimport { filteredAccountsSet } from '../../redux/filter/filterSlice';\nimport { AccountItem } from 'components/AccountItem/AccountItem';\nimport { nanoid } from 'nanoid';\n\nexport const AccountsList = () => {\n    const dispatch = useDispatch();\n    const allAccounts = useSelector(selectAllAccounts);\n    const accountsByPage = useSelector(selectAccountsByPage);\n    const filterEmail = useSelector(selectFilterByEmail);\n    const filterDate = useSelector(selectFilterByDate);\n    const isCheckedAllAccounts = useSelector(selectIsCheckedAllAccounts);\n    const filteredAccounts = useSelector(selectFilteredAccounts);\n\n    const [page, setPage] = useState(0);\n    const [totalPage, setTotalPage] = useState(1);\n    const [isLoadMore, setIsLoadMore] = useState(false);\n    const [isLoadLess, setIsLoadLess] = useState(true);\n    console.log('page =>', page);\n    console.log('isLoadMore =>', isLoadMore);\n    console.log('isLoadLess =>', isLoadLess);\n\n\n    useEffect(() => {\n        if (page === 0) {\n            setPage(page + 1)\n            return;\n        };\n        // if (page >= 0 && page < totalPage) {\n        //     setIsLoadMore(false)\n        // }\n        // if (page <= 1) {\n        //     setIsLoadLess(true)\n        // }\n        dispatch(getAccountsThunk(page))\n    }, [dispatch, page, totalPage]);\n\n    useEffect(() => {\n        if (filteredAccounts.length === 0) {\n            setTotalPage(allAccounts.length / LIMIT);\n            return;\n        }\n        setTotalPage(filteredAccounts.length / LIMIT);\n    }, [filteredAccounts, allAccounts]);\n\n    const onClickLoadMore = () => {\n        setPage(page + 1);\n        if (page === totalPage - 1) {\n            setIsLoadMore(true);\n        };\n        if (page >= 1) {\n            setIsLoadLess(false);\n        };\n    };\n\n    const onClickLoadLess = () => {\n        setPage(page - 1);\n\n        if (page < totalPage + 1) {\n            setIsLoadMore(false);\n        };\n\n        if (page > 1) {\n            setIsLoadLess(false);\n        };\n        if (page === 2) {\n            setIsLoadLess(true);\n        };\n    };\n\n    const doFilterAccount = (array, key, filterEmail) => {\n        return array.filter((item) =>\n            (item[key].toLowerCase().includes(filterEmail)));\n    };\n\n    useEffect(() => {\n        if (filterEmail === '' && filterDate === '' && isCheckedAllAccounts === false) {\n            dispatch(filteredAccountsSet([]));\n            return;\n        };\n        setPage(0);\n        setIsLoadMore(true);\n        setIsLoadLess(true);\n        let visibleAccounts = [];\n        if (isCheckedAllAccounts) {\n            visibleAccounts = allAccounts;\n        };\n        if (filterEmail !== '' && filterDate !== '') {\n            const visibleAccountsByEmail = doFilterAccount(allAccounts, \"email\", filterEmail);\n            visibleAccounts = doFilterAccount(visibleAccountsByEmail, \"creationDate\", filterDate);\n        };\n        if (filterEmail !== '' && filterDate === '') {\n            visibleAccounts = doFilterAccount(allAccounts, \"email\", filterEmail);\n        };\n        if (filterEmail === '' && filterDate !== '') {\n            visibleAccounts = doFilterAccount(allAccounts, \"creationDate\", filterDate);\n        };\n        dispatch(filteredAccountsSet(visibleAccounts));\n\n    }, [dispatch, allAccounts, filterEmail, filterDate, isCheckedAllAccounts]);\n\n    return (\n        <div className='container'>\n            <table className=\"table table-striped table-bordered\">\n                <thead className='table-dark'>\n                    <tr>\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">AccountId</th>\n                        <th scope=\"col\">Email</th>\n                        <th scope=\"col\">AuthToken</th>\n                        <th scope=\"col\">CreationDate</th>\n                    </tr>\n                </thead>\n                <tbody className=\"table-group-divider\">\n                    {(filterEmail.length > 0 || filterDate.length > 0 || isCheckedAllAccounts) ? filteredAccounts?.map((item, index) =>\n                        <AccountItem item={item} index={index} page={page} id={nanoid(3)} />\n                    ) :\n                        accountsByPage?.map((item, index) =>\n                            <AccountItem item={item} index={index} page={page} id={nanoid(3)} />\n                        )}\n                </tbody>\n            </table>\n            {!isLoadMore && <button type=\"button\" className=\"btn btn-primary btn-lg\" onClick={onClickLoadMore}>Load more</button>}\n            {!isLoadLess && <button type=\"button\" className=\"btn btn-warning btn-lg\" onClick={onClickLoadLess}>Load less</button>}\n        </div>\n    )\n};","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getAllAccountsThunk } from '../redux/accounts/operationAccounts';\nimport { Filters } from 'components/Filters/Filter';\nimport { AccountsList } from 'components/AccountsList/AccountsList';\n\nconst Accounts = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getAllAccountsThunk())\n    }, [dispatch]);\n\n    return (\n        <div className='container'>\n            <h2>Accounts</h2>\n            <Filters/>\n            <AccountsList />\n        </div>\n    )\n};\n\nexport default Accounts;","export const selectAllAccounts = state => state.accounts.allAccounts;\nexport const selectAccountsByPage = state => state.accounts.accountsByPage;\nexport const selectSelectedAccountById= state => state.accounts.selectedAccountById;\nexport const selectIsLoading = state => state.accounts.isLoading;\nexport const selectError = state => state.accounts.error;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["selectFilterByEmail","state","filter","filterByEmail","selectFilterByDate","filterByDate","selectIsCheckedAllAccounts","isCheckedAllAccounts","selectFilteredAccounts","filteredAccounts","Filters","dispatch","useDispatch","filterEmail","useSelector","filterDate","IsCheckedAllAccounts","onChangeFilter","event","_event$currentTarget","currentTarget","type","value","lowerEmail","toLowerCase","filterByEmailSet","filterByDateSet","_jsxs","className","css","children","_jsx","id","checked","onChange","isCheckedAllAccountsSet","htmlFor","placeholder","AccountItem","_ref","item","index","page","scope","onClick","accountId","accountIdSet","getProfilesByAccountIdThank","NavLink","role","to","email","authToken","creationDate","AccountsList","allAccounts","selectAllAccounts","accountsByPage","selectAccountsByPage","_useState","useState","_useState2","_slicedToArray","setPage","_useState3","_useState4","totalPage","setTotalPage","_useState5","_useState6","isLoadMore","setIsLoadMore","_useState7","_useState8","isLoadLess","setIsLoadLess","console","log","useEffect","getAccountsThunk","length","LIMIT","doFilterAccount","array","key","includes","visibleAccounts","visibleAccountsByEmail","filteredAccountsSet","map","nanoid","getAllAccountsThunk","accounts","selectSelectedAccountById","selectedAccountById","size","arguments","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}